openapi: 3.0.0
info:
  version: "1.0.0"
  title: Notes API
  description: |
    Сервис для хранения заметок с REST API

    [GitHub Repository](https://github.com/xydens/sandbox-notes-api)
  contact:
    email: xydenswork@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - description: Locally running server
    url: http://localhost:3000
tags:
  - name: auth
    description: Everything about user authentication
  - name: notes
    description: notes
paths:
  /auth/register:
    post:
      tags:
        - auth
      summary: Creates new user
      requestBody:
        $ref: '#/components/requestBodies/UserCredentials'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /auth/token:
    post:
      tags:
        - auth
      summary: Authenticates user and provides an access token
      requestBody:
        $ref: '#/components/requestBodies/PasswordCredentialsGrant'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /auth/logout:
    get:
      tags:
        - auth
      summary: Logs out current logged in user session
      security:
        - notesOAuth2: []
      responses:
        default:
          description: successful operation
  /notes:
    get:
      tags:
        - notes
      summary: show user notes list
      security:
        - notesOAuth2: []
      responses:
        '200':
          description: user notes list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Note'
        '401':
          $ref: '#/components/responses/NotAuthorized'
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
        - name: offset
          in: query
          schema:
            type: integer
    post:
      tags:
        - notes
      summary: creates a new note
      security:
        - notesOAuth2: []
      requestBody:
        $ref: '#/components/requestBodies/NoteDraft'
      responses:
        '200':
          description: the note
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        '401':
          $ref: '#/components/responses/NotAuthorized'
  /notes/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    get:
      tags:
        - notes
      summary: show a note
      security:
        - notesOAuth2: []
      responses:
        '200':
          description: the note
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        '401':
          $ref: '#/components/responses/NotAuthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      tags:
        - notes
      summary: edit the note
      security:
        - notesOAuth2: []
      requestBody:
        $ref: '#/components/requestBodies/NoteDraft'
      responses:
        '200':
          description: the note
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        '401':
          $ref: '#/components/responses/NotAuthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - notes
      summary: removes the note
      security:
        - notesOAuth2: []
      responses:
        '204':
          description: no content
        '401':
          $ref: '#/components/responses/NotAuthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  /notes/{id}/pointers:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    get:
      tags:
        - notes
      summary: show note pointers
      security:
        - notesOAuth2: []
      responses:
        '200':
          description: pointers lis
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Note'
        '401':
          $ref: '#/components/responses/NotAuthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      tags:
        - notes
      summary: creates a new note pointer
      security:
        - notesOAuth2: []
      responses:
        '200':
          description: the new note pointer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pointer'
        '401':
          $ref: '#/components/responses/NotAuthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  /notes/{id}/pointers/{pointerId}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      - name: pointerId
        in: path
        required: true
        schema:
          type: integer
    delete:
      tags:
        - notes
      summary: creates a new note pointer
      security:
        - notesOAuth2: []
      responses:
        '204':
          description: deletion success
        '401':
          $ref: '#/components/responses/NotAuthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  /p/{code}:
    get:
      summary: show note by shortlink
      parameters:
        - name: code
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: note
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        '404':
          $ref: '#/components/responses/NotFound'
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
components:
  schemas:
    Pointer:
      type: object
      properties:
        id:
          type: integer
        code:
          type: string
    Note:
      type: object
      properties:
        id:
          type: integer
        text:
          type: string
      required:
        - id
        - text
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
    UserCredentials:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          minLength: 6
          maxLength: 30
          pattern: ^[a-zA-Z][a-zA-Z_\-\.0-9]+$
        password:
          type: string
          minLength: 6
          maxLength: 30
          pattern: ^[a-zA-Z_\-\.0-9]+$
    PasswordCredentialsGrant:
      type: object
      required:
        - grant_type
        - username
        - password
      properties:
        grant_type:
          type: string
          enum:
            - password
            - ''
        username:
          type: string
          minLength: 6
          maxLength: 30
          pattern: ^[a-zA-Z][a-zA-Z_\-\.0-9]+$
        password:
          type: string
          minLength: 6
          maxLength: 30
          pattern: ^[a-zA-Z_\-\.0-9]+$
    NoteDraft:
      type: object
      properties:
        text:
          type: string
          minLength: 1
          maxLength: 1000
      required:
        - text
  requestBodies:
    UserCredentials:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserCredentials'
    PasswordCredentialsGrant:
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/PasswordCredentialsGrant'
    NoteDraft:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NoteDraft'
  responses:
    NotAuthorized:
      description: The required authentication is not provided or invalid
      content:
        application/json:
          schema:
            type: object
    Forbidden:
      description: The intended action was forbidden because of policy violation
      content:
        application/json:
          schema:
            type: object
    NotFound:
      description: The required entity does not exists
      content:
        application/json:
          schema:
            type: object
  securitySchemes:
    notesOAuth2:
      type: oauth2
      description: For more information, see https://api.slack.com/docs/oauth
      flows:
        password:
          tokenUrl: /auth/token
          scopes: {}
